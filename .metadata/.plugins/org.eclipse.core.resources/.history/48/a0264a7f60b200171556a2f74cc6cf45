import org.opencv.core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

import javax.swing.*;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;

public class Simulator
{

    public void run(String imageName, String effect) 
    {
        Mat m = Imgcodecs.imread("src/images/"+ imageName + ".png");
        Mat result;
        if(m.empty())
        {
            System.out.println("Error opening image");
            return;
        }
       
        Image input = toBufferedImage( m );
        displayImage("Input Image" , input, 0, 200 );
        
        switch(effect)
        {
        	case "dim": result = dim(m);break;
        	case "removeShadow": result = removeShadow(m);break;
        	case "brightenCoat": result = brightenCoat(m);break;
        	case "combineLondon1": result = combineLondon1(m);break;
        	case "combineLondon2": result = combineLondon2(m);break;
        	default: result=null; System.out.println("No such effect!");return;
        }
       
        Image output = toBufferedImage( result );
        displayImage("Output Image" , output, 0, 200 );
        
    }

	private Mat dim(Mat m) 
    {
    	Mat result = new Mat();
    	result.create(m.size(),m.type());
    	
    	for(int i=0; i<m.rows(); i++)
    	{
    		for(int j=0; j<m.cols(); j++)
    		{	
    			double sum[] = new double[m.channels()];
    			for(int k=0; k<m.channels(); k++)
    			{
    				double newIntensity = saturateCastUchar(m.get(i, j)[k] - 60) ;
    				sum[k] = newIntensity;
    			}
    			result.put(i, j, sum);
    		}
    	}
    	
    	return result;
	}

    private Mat removeShadow(Mat m) 
    {
    	Mat result = new Mat();
    	result.create(m.size(),m.type());
    	
    	for(int i=0; i<m.rows(); i++)
    	{
    		for(int j=0; j<m.cols(); j++)
    		{	
    			double sum[] = new double[m.channels()];
    			for(int k=0; k<m.channels(); k++)
    			{
    				double newIntensity ;
    				if(m.get(i, j)[k] > 160)
    					newIntensity = 160;
    				else
    					newIntensity = m.get(i, j)[k];
    				
    				sum[k] = newIntensity;
    			}
    			result.put(i, j, sum);
    		}
    	}
    	
    	return result;
	}
    
    private Mat brightenCoat(Mat m) 
    {
    	Mat result = new Mat();
    	result.create(m.size(),m.type());
    	
    	for(int i=0; i<m.rows(); i++)
    	{
    		for(int j=0; j<m.cols(); j++)
    		{	
    			double sum[] = new double[m.channels()];
    			
    			double newIntensity;
    			for(int k=0; k<m.channels(); k++)
    			{
					if(m.get(i, j)[k] < 40)
						newIntensity = m.get(i, j)[k] + 20 ;
					else
						newIntensity = m.get(i, j)[k];
    				
    				sum[k] = newIntensity;
    			}
    			result.put(i, j, sum);
    		}
    	}
    	
    	return result;
	}

    private Mat combineLondon1(Mat m)
    {
    	Mat jb = Imgcodecs.imread("src/images/james.png");
    	Mat background = new Mat();
    	m.copyTo(background);

    	Mat result = new Mat();
    	result.create(jb.size(),jb.type());
    	
    	for(int i=0; i<jb.rows(); i++)
    	{
    		for(int j=0; j<jb.cols(); j++)
    		{	
    			double newIntensities[] = new double[jb.channels()];
    			
    			double newIntensity;
    			for(int k=0; k<jb.channels(); k++)
    			{
					if(jb.get(i, j)[k] > 240)
						newIntensity = background.get(i, j)[k];
					else
						newIntensity = jb.get(i, j)[k];
    				
    				newIntensities[k] = newIntensity;
    			}
    			result.put(i, j, newIntensities);
    		}
    	}
    	
    	return result;
    }
    
    private Mat combineLondon2(Mat m)
    {
    	//TODO
    	return null;
    }
    
    public static double saturateCastUchar(double x) 
    {
        return x > 255.0 ? 255.0 : (x < 0.0 ? 0.0 : x);
    }

    public void printPixels(Mat m)
    {
    	for(int i=0; i<m.rows(); i++)
    	{
    		for(int j=0; j<m.cols(); j++)
    		{	
    			for(int k=0; k<m.channels(); k++)
    			{
    				System.out.print(m.get(i, j)[k] + "-");
    			}
    			System.out.println();
    		}
    	}
    }
    
    public Mat sharpen(Mat myImage)
    {
    	Mat result = new Mat();
    	
        myImage.convertTo(myImage, CvType.CV_8U); //convert to 8 bit

        int nChannels = myImage.channels(); //create channels
        result.create(myImage.size(),myImage.type());

      //! [basic_method_loop]
        for(int j = 1 ; j < myImage.rows()-1; ++j)
        {
            for(int i = 1 ; i < myImage.cols()-1; ++i)
            {
                double sum[] = new double[nChannels];

                for(int k = 0; k < nChannels; ++k) {

                    double top = -myImage.get(j - 1, i)[k];
                    double bottom = -myImage.get(j + 1, i)[k];
                    double center = (5 * myImage.get(j, i)[k]);
                    double left = -myImage.get(j , i - 1)[k];
                    double right = -myImage.get(j , i + 1)[k];

                    sum[k] = saturateCastUchar(top + bottom + center + left + right);
                }

                result.put(j, i, sum);
            }
        }
      //! [basic_method_loop]

      //! [borders]
        result.row(0).setTo(new Scalar(0));
        result.row(result.rows()-1).setTo(new Scalar(0));
        result.col(0).setTo(new Scalar(0));
        result.col(result.cols()-1).setTo(new Scalar(0));
      //! [borders]

        return result;
    }

    public Image toBufferedImage(Mat m) 
    {
        int type = BufferedImage.TYPE_BYTE_GRAY;
        if ( m.channels() > 1 ) 
            type = BufferedImage.TYPE_3BYTE_BGR;
        
        int bufferSize = m.channels()*m.cols()*m.rows();
        byte [] b = new byte[bufferSize];
        m.get(0,0,b); // get all the pixels
        BufferedImage image = new BufferedImage(m.cols(),m.rows(), type);
        final byte[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
        System.arraycopy(b, 0, targetPixels, 0, b.length);
        return image;
    }

    public void displayImage(String title, Image img, int x, int y)
    {
        ImageIcon icon = new ImageIcon(img);
        JFrame frame=new JFrame(title);
        JLabel lbl=new JLabel(icon);
        frame.add(lbl);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setLocation(x, y);
        frame.setVisible(true);
    }
 
    public static void main(String[] args)
    {
        // Load the native library.
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        
        Simulator s = new Simulator();
        s.run("london1","combineLondon1");
    }

}
    
    

//    public void run() 
//    {
//        Mat m = Imgcodecs.imread("src/images/GUC.png");
//        if(m.empty())
//        {
//            System.out.println("Error opening image");
//            return;
//        }
//
//        Image img = toBufferedImage( m );
//        displayImage("Input Image" , img, 0, 200 );
//
//        Mat J = sharpen(m, new Mat());
//
//        Image img2 = toBufferedImage( J );
//        displayImage("Output Image" , img2, 400, 400 );
//
//        Mat K = new Mat();
//    //![kern]
//        Mat kern = new Mat( 3, 3, CvType.CV_8S );
//        int row = 0, col = 0;
//        kern.put(row ,col, 0, -1, 0, -1, 5, -1, 0, -1, 0 );
//    //![kern]
//
//        System.out.println("kern = \n" + kern.dump());
//
//    //![filter2D]
//        Imgproc.filter2D(m, K, m.depth(), kern );
//    //![filter2D]
//
//        Image img3 = toBufferedImage( J );
//        displayImage("filter2D Output Image" , img3, 800, 400 );
//    }

